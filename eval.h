#ifndef MOTOR_EVAL_H
#define MOTOR_EVAL_H

#include "board.h"

constexpr int piece_values[N_PIECE_TYPES] = {100, 290, 330, 500, 920, 10'000};
constexpr int game_phase_inc[N_PIECE_TYPES] = {0, 1, 1, 2, 4, 0};

constexpr int piece_square_table[N_PIECE_TYPES][N_SQUARES] = {
        {                   // PAWN
                0,   0,   0,   0,   0,   0,   0,   0,
                90,  90,  90,  90,  90,  90,  90,  90,
                15,  30,  30,  45,  45,  30,  30,  15,
                -15,  12,  12,  15,  15,  12,  12, -15,
                -5,   5,   8,  10,  10,   8,   5, -10,
                -5,  5,   5, -10, -10,   5,  15,   0,
                -10,   5,  -5, -40, -40,  10,  15,  -5,
                0,   0,   0,   0,   0,   0,   0,   0,
        },
        {                   // KNIGHT
                -100, -50, -35, -15, -10, -35, -50, -100,
                -45,   0,  70,  25,  25,  70,  10, -20,
                10,  50,  20,  65,  65,  65,  60,  25,
                -5,  15,  45,  40,  40,  50,  25,  15,
                -5,   5,  25,  25,  25,  25,  25,  -5,
                -20,   5,  15,  15,  20,  15,  10, -15,
                -25, -15,   0,   3,   3,   0, -20, -15,
                -100, -25, -35, -10, -10, -35, -25, -75,
        },
        {                   // BISHOP
                -60, -20, -20, -20, -20, -20, -20, -50,
                -20,  10,  35, -40, -40,  35,  10, -20,
                0,  40,  40,  45,  45,  40,  40,   0,
                10,  20,  20,  25,  25,  25,  20,  10,
                10,  10,  20,  25,  25,  20,   0,  10,
                10,  25,  25,  15,  15,  25,  25,  15,
                15,  25,  15,   7,   7,  10,  25,  10,
                -5,   0, -20, -20, -10, -20, -10, -5
        },
        {                   // ROOK
                20,  20,  20,  10,  10,  20,  20,  20,
                70,  70,  70,  70,  70,  70,  70,  70,
                20,  25,  25,  30,  30,  25,  25,  20,
                0,   0,   5,   5,   5,   5,   0,   0,
                -20, -20, -15, -15, -15, -20, -20, -10,
                -25, -25, -25, -25, -25, -25, -25, -25,
                -50, -40, -40,  -5,   0, -40, -40, -50,
                -30, -15,   5,  20,  20,  10, -25, -30,
        },
        {                   // QUEEN
                -20,   0,   0,   0,  40,  25,  40,  10,
                20,  20,  20,  10,  10,  50,  50,  30,
                0,  20,  20,  60,  60,  50,  40,   0,
                -5, -10,  20,  20,  20,  20, -10,  -5,
                -15, -15,  -5,  -5,  -5,  -5, -20, -20,
                -30,  -5, -15, -10, -10,  -5, -15, -25,
                -35, -20,  10,   0,   5,  10,   0, -10,
                -40, -30, -31,  10, -15, -35, -35, -40
        },
        {                   //  KING
                0,  20,  30,  30,  30,  30,  20,   0,
                5,  10,  20,  30,  30,  20,  10,   5,
                5,  10,   0,  30,  30,  25,  20, -10,
                -55,  50,  10, 15,  15,  10,   0, -20,
                -55, -45, -40,  0,   0, -40,   0, -50,
                -40, -40, -40,-50, -50, -30, -30, -30,
                -5,   3, -15, -50, -50, -10,  10,  10,
                15,  30,  10, -15,   5,  -5,  40,  15
        }
};

constexpr int eg_piece_square_table[N_PIECE_TYPES][N_SQUARES] = {
        {                   // PAWN
                0,   0,   0,   0,   0,   0,   0,   0,
                180, 150, 150, 150, 150, 150, 150, 180,
                100, 100, 100,  70,  70, 100, 100, 100,
                40,  40,  20,   5,   5,   20,  40,  40,
                10,   5,  -5,  -5,  -5,  -5,   5,   10,
                5,   5,   0,   0,   0,   0,    5,    5,
                10,  10,  10,  10,  10,  10,  10,  10,
                0,   0,   0,   0,   0,   0,   0,   0,
        },
        {                   // KNIGHT
                -50, -35, -20, -20, -20, -20, -35, -50,
                -40, -20, -25,  -2,  -9, -25, -20, -40,
                -30, -20,  10,  10,  10,  10, -20, -30,
                -20,   3,  25,  25,  25,  25,   8, -20,
                -20,  -6,  20,  20,  20,  20,   4, -20,
                -30, -10,   0,  10,  10,   0, -10, -30,
                -50, -25, -10,  -5,  -0, -10, -25, -50,
                -75, -50, -25, -20, -20, -25, -50, -75,
        },
        {                   // BISHOP
                -25, -20, -10, -10, -10, -10, -20, -25,
                -15,  -5,   0, -10, -10,   0,  -5, -15,
                -5,    0,   0,   0,   0,   0,   0,  -5,
                 -5,  10,  15,  15,  15,  15,  10,  -5,
                 -5,  10,  15,  20,  20,  15,  10,  -5,
                -15,  -5,   5,  10,  10,   5,  -5, -15,
                -20, -15, -10,   0,   0, -10, -15, -20,
                -25, -20, -20, -10, -10, -20, -20, -25,
        },
        {                   // ROOK
                15, 15, 15, 15, 15,  15,  15,  15,
                15, 15, 15, 15, 15,  15,  15,  15,
                 5,  5,  5,  5,  5,   5,   5,   5,
                 2,  2,  2,  2,  2,   2,   2,   2,
                 2,  2,  2,  2,  2,   2,   2,   2,
               -10,-10,-10,-10,-10, -10, -10, -10,
                -5, -5, -5, -5, -5,  -5,  -5,  -5,
               -10,  2,  2,  2,  2,   2,   2, -10,
        },
        {                   // QUEEN
                  0,  20,  20,  25,  25,  20,  20,   0,
                -10,  20,  30,  40,  40,  30,  20, -10,
                -20,  20,  20,  50,  50,  20,  20, -10,
                -10,  25,  25,  45,  45,  25,  25, -10,
                -10,  25,  25,  45,  45,  25,  25, -10,
                -10,   5,  10,  10,  10,  10,   5, -10,
                -30, -25, -25, -15, -15, -25, -25, -30,
                -35, -30, -20, -20, -20, -20, -30, -35,
        },
        {                   //  KING
                -20, -20, -20, -20, -20, -20, -20, -20,
                 10,  15,  15,  15,  15,  15,  15,  10,
                  5,  25,  25,  25,  25,  25,  25,   5,
                  0,  15,  25,  30,  30,  33,  26,   0,
                -15,  10,  25,  30,  30,  23,  10, -15,
                -20,   5,  15,  20,  20,  15,   5, -20,
                -25, -10,  10,  15,  15,  10, -10, -25,
                -50, -25, -20, -20, -20, -20, -25, -50,
        }
};

static int evaluate(board& b) {
    int score;

    int piece_score = 0;
    int mg_score = 0;
    int eg_score = 0;
    int game_phase = 0;

    for (int piece = 0; piece < 5; piece++) {
        uint64_t bitboard = b.get_pieces(WHITE, piece);
        while(bitboard) {
            int square = pop_lsb(bitboard) ^ 56;
            piece_score += piece_values[piece];
            mg_score += piece_square_table[piece][square];
            eg_score += eg_piece_square_table[piece][square];
            game_phase += game_phase_inc[piece];
        }
    }

    for (int piece = 0; piece < 5; piece++) {
        uint64_t bitboard = b.get_pieces(BLACK, piece);
        while(bitboard) {
            int square = pop_lsb(bitboard);
            piece_score -= piece_values[piece];
            mg_score -= piece_square_table[piece][square];
            eg_score -= eg_piece_square_table[piece][square];
            game_phase += game_phase_inc[piece];
        }
    }

    //int pawnscore = 0;
    //pawnscore -= 16 * popcount(shift<NORTH>(pieces_bitboards[WHITE][PAWN]) | shift<NORTH_2>(pieces_bitboards[WHITE][PAWN]) & pieces_bitboards[WHITE][PAWN]);
    //pawnscore += 16 * popcount(shift<SOUTH>(pieces_bitboards[BLACK][PAWN]) | shift<SOUTH_2>(pieces_bitboards[BLACK][PAWN]) & pieces_bitboards[BLACK][PAWN]);

    game_phase = std::min(game_phase, 24);
    score = piece_score /*+ pawnscore*/ + (game_phase * mg_score + (24 - game_phase) * eg_score) / 24;

    score += (popcount(b.get_attacked_squares<WHITE>()) - popcount(b.get_attacked_squares<BLACK>())) * 10;

    return b.get_side() == WHITE ? score : -score;
}

#endif // MOTOR_EVAL_H