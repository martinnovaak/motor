#ifndef MOTOR_EVALUATION_HPP
#define MOTOR_EVALUATION_HPP

#include <cstdint>
#include "../chess_board/board.hpp"

std::int16_t piece_square_tables[6][64] = {
        {
              0,   0,   0,   0,   0,   0,   0,   0,
            180, 180, 180, 180, 180, 180, 180, 180,
            140, 140, 140, 140, 140, 140, 140, 140,
            120, 120, 120, 120, 120, 120, 120, 120,
            100, 100, 100, 110, 120, 100, 100, 100,
            100, 100, 100,  90,  90, 100, 100, 100,
            100, 100, 100,  75,  75, 100, 100,  90,
              0,   0,   0,   0,   0,   0,   0,   0,
        },{
            250, 275, 280, 300, 300, 280, 275, 250,
            275, 290, 300, 320, 320, 320, 290, 275,
            280, 320, 320, 350, 350, 350, 350, 280,
            280, 310, 315, 325, 330, 340, 325, 280,
            280, 300, 315, 325, 330, 325, 310, 275,
            280, 300, 310, 310, 310, 310, 300, 275,
            275, 290, 280, 280, 280, 300, 290, 275,
            250, 275, 260, 270, 270, 250, 275, 250,
        },{
            250, 275, 280, 300, 300, 280, 275, 250,
            275, 290, 300, 320, 320, 320, 290, 275,
            280, 320, 320, 350, 350, 350, 350, 280,
            280, 310, 315, 325, 330, 340, 325, 280,
            280, 300, 315, 325, 330, 325, 310, 275,
            280, 300, 310, 310, 310, 310, 300, 275,
            275, 310, 280, 280, 280, 300, 310, 275,
            250, 275, 260, 270, 270, 250, 275, 250,
        },{
            550, 550, 550, 550, 550, 550, 550, 550,
            600, 600, 600, 600, 600, 600, 600, 600,
            520, 520, 520, 520, 520, 520, 520, 520,
            500, 500, 500, 500, 500, 500, 500, 500,
            500, 500, 500, 500, 500, 500, 500, 500,
            500, 500, 500, 500, 500, 500, 500, 500,
            500, 500, 500, 500, 500, 500, 500, 500,
            500, 500, 510, 520, 520, 510, 500, 500,
        },{
            900, 900, 900, 900, 900, 900, 900, 900,
            950, 950, 950, 950, 950, 950, 950, 950,
            900, 920, 950, 950, 950, 950, 920, 900,
            900, 920, 940, 940, 940, 940, 920, 900,
            900, 930, 930, 930, 930, 930, 910, 900,
            900, 900, 900, 900, 900, 900, 900, 900,
            900, 900, 900, 900, 900, 900, 900, 900,
            900, 900, 910, 950, 920, 910, 900, 900,
        },
        {
            -100, -100, -100, -100, -100, -100, -100, -100,
            -100, -100, -100, -100, -100, -100, -100, -100,
            -100, -100, -100, -100, -100, -100, -100, -100,
            -100, -100, -100, -100, -100, -100, -100, -100,
            -100, -100, -100, -100, -100, -100, -100, -100,
            -100, -100, -100, -100, -100, -100, -100, -100,
              -5,    5,  -15,  -50,  -57,  -20,   15,   10,
              20,   30,   20,  -15,    5,    0,   40,   20,
        }
};

template <Color color>
std::int16_t evaluate(board & chessboard) {
    std::int16_t eval = 0;

    for (Piece piece : {Pawn, Knight, Bishop, Rook, Queen, King}) {
        std::uint64_t bitboard = chessboard.get_pieces(White, piece) ;
        while (bitboard) {
            int square = pop_lsb(bitboard) ^ 56;
            eval += piece_square_tables[piece][square];
        }
    }

    for (Piece piece : {Pawn, Knight, Bishop, Rook, Queen, King}) {
        std::uint64_t bitboard = chessboard.get_pieces(Black, piece) ;
        while (bitboard) {
            int square = pop_lsb(bitboard);
            eval -= piece_square_tables[piece][square];
        }
    }

    if constexpr (color == White) {
        return eval;
    } else {
        return -eval;
    }
}


#endif //MOTOR_EVALUATION_HPP
