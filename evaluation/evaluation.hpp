#ifndef MOTOR_EVALUATION_HPP
#define MOTOR_EVALUATION_HPP

#include <cstdint>
#include "../chess_board/board.hpp"

[[nodiscard]] constexpr std::int32_t S(const int32_t mg, const int32_t eg) {
    return (eg << 16) + mg;
}

constexpr std::int16_t game_phase_increment[6] = {0, 1, 1, 2, 4, 0};
constexpr std::int16_t max_game_phase_value = 24;

constexpr std::int32_t piece_square_tables[6][64] = {
        {
                S( 100, 100), S( 100, 100), S( 100, 100), S( 100, 100), S( 100, 100), S( 100, 100), S( 100, 100), S( 100, 100),
                S( 233, 370), S( 263, 362), S( 222, 343), S( 248, 306), S( 249, 314), S( 220, 336), S(  97, 385), S(  40, 404),
                S(  76, 273), S( 103, 267), S( 123, 254), S( 153, 224), S( 165, 230), S( 161, 216), S( 143, 258), S(  88, 257),
                S(  60, 195), S(  90, 182), S(  86, 159), S( 101, 151), S( 107, 146), S( 101, 154), S( 108, 169), S(  70, 167),
                S(  49, 169), S(  78, 158), S(  78, 138), S(  88, 132), S( 108, 133), S(  96, 136), S( 110, 147), S(  67, 140),
                S(  51, 154), S(  72, 155), S(  68, 129), S(  69, 145), S(  86, 138), S(  85, 132), S( 136, 133), S(  84, 129),
                S(  44, 167), S(  73, 159), S(  56, 147), S(  40, 143), S(  59, 161), S( 108, 136), S( 142, 135), S(  76, 132),
                S( 100, 100), S( 100, 100), S( 100, 100), S( 100, 100), S( 100, 100), S( 100, 100), S( 100, 100), S( 100, 100),
        },
        {
                S( 203, 330), S( 243, 374), S( 347, 385), S( 400, 352), S( 474, 352), S( 281, 381), S( 384, 320), S( 302, 258),
                S( 336, 357), S( 338, 402), S( 439, 381), S( 432, 406), S( 412, 396), S( 478, 355), S( 405, 356), S( 379, 342),
                S( 328, 385), S( 424, 386), S( 409, 427), S( 436, 426), S( 510, 396), S( 553, 387), S( 447, 388), S( 421, 353),
                S( 374, 382), S( 382, 419), S( 402, 436), S( 419, 444), S( 396, 440), S( 426, 436), S( 390, 419), S( 404, 379),
                S( 356, 378), S( 374, 397), S( 384, 432), S( 373, 440), S( 394, 434), S( 375, 436), S( 393, 408), S( 363, 369),
                S( 335, 359), S( 359, 393), S( 369, 411), S( 363, 426), S( 384, 417), S( 374, 388), S( 375, 385), S( 336, 370),
                S( 319, 344), S( 302, 384), S( 349, 382), S( 366, 388), S( 353, 400), S( 373, 368), S( 360, 360), S( 346, 347),
                S( 244, 348), S( 339, 337), S( 292, 382), S( 322, 383), S( 339, 365), S( 360, 355), S( 329, 331), S( 296, 326),
        },
        {
                S( 377, 409), S( 402, 412), S( 352, 419), S( 374, 419), S( 362, 423), S( 380, 417), S( 435, 394), S( 396, 405),
                S( 362, 418), S( 407, 434), S( 397, 437), S( 417, 423), S( 430, 426), S( 472, 406), S( 396, 427), S( 375, 397),
                S( 384, 430), S( 421, 429), S( 437, 434), S( 450, 434), S( 453, 435), S( 517, 433), S( 473, 427), S( 419, 426),
                S( 383, 419), S( 402, 443), S( 430, 437), S( 439, 460), S( 419, 462), S( 440, 445), S( 399, 447), S( 395, 428),
                S( 408, 413), S( 413, 431), S( 408, 450), S( 418, 461), S( 428, 448), S( 398, 445), S( 402, 432), S( 410, 409),
                S( 398, 417), S( 416, 424), S( 404, 442), S( 405, 455), S( 399, 444), S( 402, 432), S( 412, 424), S( 392, 414),
                S( 414, 396), S( 403, 403), S( 409, 418), S( 387, 431), S( 393, 433), S( 413, 409), S( 418, 405), S( 396, 385),
                S( 351, 408), S( 387, 405), S( 376, 386), S( 365, 414), S( 384, 409), S( 366, 406), S( 359, 407), S( 352, 401),
        },
        {
                S( 567, 735), S( 560, 740), S( 584, 742), S( 603, 740), S( 632, 726), S( 599, 730), S( 624, 723), S( 654, 708),
                S( 528, 761), S( 523, 766), S( 567, 761), S( 582, 759), S( 602, 742), S( 636, 717), S( 579, 738), S( 602, 727),
                S( 508, 757), S( 532, 755), S( 529, 759), S( 568, 746), S( 583, 738), S( 607, 724), S( 623, 715), S( 552, 726),
                S( 473, 749), S( 492, 752), S( 512, 759), S( 539, 742), S( 534, 741), S( 542, 742), S( 529, 733), S( 481, 742),
                S( 463, 738), S( 475, 744), S( 487, 750), S( 497, 744), S( 514, 731), S( 485, 727), S( 516, 723), S( 452, 732),
                S( 445, 729), S( 468, 735), S( 477, 732), S( 479, 729), S( 499, 718), S( 494, 709), S( 496, 723), S( 447, 721),
                S( 442, 730), S( 476, 725), S( 471, 736), S( 482, 732), S( 495, 719), S( 493, 716), S( 479, 726), S( 376, 749),
                S( 476, 720), S( 483, 730), S( 488, 743), S( 499, 739), S( 503, 728), S( 490, 733), S( 399, 768), S( 434, 723),
        },
        {
                S(1112, 1322), S(1096, 1389), S(1141, 1370), S(1171, 1341), S(1192, 1355), S(1285, 1289), S(1300, 1268), S(1207,1322),
                S(1089, 1329), S(1071, 1382), S(1094, 1417), S(1082, 1446), S(1091, 1433), S(1218, 1349), S(1134, 1397), S(1224,1293),
                S(1112, 1319), S(1103, 1353), S(1103, 1386), S(1131, 1402), S(1158, 1413), S(1225, 1359), S(1197, 1374), S(1171,1350),
                S(1095, 1325), S(1091, 1377), S(1092, 1392), S(1098, 1420), S(1120, 1414), S(1120, 1408), S(1115, 1411), S(1113,1396),
                S(1093, 1323), S(1088, 1362), S(1096, 1367), S(1123, 1366), S(1108, 1390), S(1106, 1381), S(1110, 1385), S(1115,1349),
                S(1096, 1291), S(1109, 1305), S(1098, 1348), S(1098, 1338), S(1099, 1339), S(1109, 1345), S(1119, 1354), S(1102,1326),
                S(1067, 1307), S(1107, 1293), S(1113, 1289), S(1103, 1317), S(1104, 1316), S(1134, 1260), S(1101, 1268), S(1099,1289),
                S(1110, 1277), S(1091, 1283), S(1084, 1306), S(1107, 1266), S(1089, 1306), S(1075, 1269), S(1028, 1295), S(1044,1261),
        },
        {
                S( -12, -57), S(  78, -24), S( 106, -29), S(  49,  -3), S(   8,  14), S(  14,  26), S(  45,  23), S(  15, -14),
                S(  77,  -9), S(  30,  34), S(  21,  32), S(  68,  23), S(  18,  31), S(  19,  49), S(  11,  56), S( -40,  28),
                S(  43,  10), S(  29,  34), S(  16,  38), S(  17,  32), S(   8,  37), S(  50,  48), S(  41,  57), S(  -6,  32),
                S(  11,   1), S(   9,  30), S(  -2,  39), S( -15,  41), S( -18,  39), S(   9,  42), S(  13,  38), S( -51,  21),
                S( -38,  -4), S(  22,   2), S(   1,  25), S( -36,  34), S( -26,  34), S( -18,  30), S( -27,  21), S( -53,   2),
                S(  17, -23), S(  13,  -2), S( -16,  14), S( -33,  24), S( -34,  26), S( -29,  19), S(   0,   5), S( -32,  -3),
                S(  26, -29), S(  -6,  -4), S( -18,   8), S( -65,  17), S( -45,  17), S( -19,   7), S(  14,  -6), S(  26, -24),
                S( -44, -38), S(  19, -28), S(   2, -12), S( -72,  -5), S(   4, -33), S( -46,  -5), S(  33, -30), S(  25, -52),
        },
};

template <Color color>
std::int16_t evaluate(board & chessboard) {
    std::int32_t eval = 0;
    std::int16_t game_phase = 0;

    for (Piece piece : {Pawn, Knight, Bishop, Rook, Queen, King}) {
        std::uint64_t bitboard = chessboard.get_pieces(White, piece) ;
        while (bitboard) {
            int square = pop_lsb(bitboard) ^ 56;
            eval += piece_square_tables[piece][square];
            game_phase += game_phase_increment[piece];
        }
    }

    for (Piece piece : {Pawn, Knight, Bishop, Rook, Queen, King}) {
        std::uint64_t bitboard = chessboard.get_pieces(Black, piece) ;
        while (bitboard) {
            int square = pop_lsb(bitboard);
            eval -= piece_square_tables[piece][square];
            game_phase += game_phase_increment[piece];
        }
    }

    game_phase = std::min(game_phase, max_game_phase_value);

    auto mg_eval = static_cast<int16_t>(eval);
    auto eg_eval = static_cast<int16_t>(eval >> 16);

    if constexpr (color == White) {
        return static_cast<std::int16_t>( (mg_eval * game_phase + eg_eval * (24 - game_phase)) / 24);
    } else {
        return static_cast<std::int16_t>(-(mg_eval * game_phase + eg_eval * (24 - game_phase)) / 24);
    }
}


#endif //MOTOR_EVALUATION_HPP
