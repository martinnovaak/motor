#ifndef MOTOR_EVALUATION_HPP
#define MOTOR_EVALUATION_HPP

#include <cstdint>
#include "../chess_board/board.hpp"

[[nodiscard]] constexpr std::int32_t S(const int32_t mg, const int32_t eg) {
    return (eg << 16) + mg;
}

constexpr std::int16_t game_phase_increment[6] = {0, 1, 1, 2, 4, 0};
constexpr std::int16_t max_game_phase_value = 24;

constexpr std::int32_t piece_square_tables[6][64] = {
        {
                S( 100, 100), S( 100, 100), S( 100, 100), S( 100, 100), S( 100, 100), S( 100, 100), S( 100, 100), S( 100, 100),
                S( 203, 263), S( 233, 256), S( 193, 238), S( 213, 191), S( 201, 205), S( 184, 231), S(  99, 276), S(   9, 298),
                S(  88, 186), S( 117, 176), S( 129, 153), S( 139,  99), S( 156, 110), S( 193, 140), S( 174, 171), S( 105, 165),
                S(  70, 170), S(  96, 163), S(  97, 141), S( 109, 117), S( 116, 131), S( 112, 143), S( 119, 157), S(  76, 149),
                S(  58, 155), S(  82, 153), S(  92, 133), S(  98, 119), S( 116, 126), S( 109, 136), S( 121, 143), S(  71, 132),
                S(  62, 140), S(  78, 146), S(  83, 130), S(  82, 130), S( 102, 132), S( 104, 131), S( 148, 128), S(  92, 120),
                S(  53, 151), S(  79, 147), S(  70, 144), S(  58, 126), S(  83, 147), S( 126, 130), S( 154, 127), S(  87, 119),
                S( 100, 100), S( 100, 100), S( 100, 100), S( 100, 100), S( 100, 100), S( 100, 100), S( 100, 100), S( 100, 100),
        },
        {
                S( 204, 344), S( 247, 385), S( 338, 394), S( 391, 365), S( 440, 371), S( 268, 394), S( 361, 331), S( 289, 278),
                S( 327, 371), S( 325, 415), S( 425, 393), S( 416, 422), S( 403, 408), S( 460, 367), S( 393, 365), S( 370, 355),
                S( 317, 398), S( 411, 400), S( 398, 439), S( 421, 441), S( 499, 409), S( 537, 401), S( 438, 403), S( 412, 362),
                S( 366, 396), S( 374, 432), S( 393, 450), S( 411, 456), S( 389, 454), S( 418, 448), S( 385, 432), S( 402, 389),
                S( 346, 391), S( 364, 411), S( 380, 445), S( 370, 453), S( 390, 448), S( 372, 448), S( 388, 419), S( 357, 381),
                S( 328, 376), S( 350, 408), S( 364, 424), S( 365, 439), S( 383, 432), S( 375, 402), S( 370, 399), S( 334, 384),
                S( 311, 365), S( 305, 395), S( 346, 397), S( 366, 402), S( 357, 410), S( 376, 384), S( 353, 373), S( 345, 360),
                S( 227, 368), S( 334, 348), S( 294, 395), S( 327, 397), S( 348, 376), S( 362, 367), S( 338, 342), S( 293, 337),
        },
        {
                S( 329, 370), S( 347, 372), S( 286, 380), S( 311, 379), S( 302, 381), S( 315, 382), S( 395, 357), S( 349, 370),
                S( 309, 384), S( 346, 384), S( 336, 385), S( 351, 373), S( 363, 376), S( 398, 358), S( 326, 378), S( 320, 361),
                S( 333, 386), S( 363, 377), S( 374, 368), S( 384, 372), S( 397, 370), S( 454, 372), S( 414, 374), S( 368, 385),
                S( 332, 377), S( 350, 382), S( 369, 374), S( 384, 386), S( 359, 388), S( 380, 378), S( 346, 389), S( 346, 385),
                S( 355, 371), S( 355, 377), S( 355, 385), S( 364, 392), S( 374, 374), S( 342, 378), S( 349, 375), S( 366, 369),
                S( 344, 378), S( 364, 376), S( 352, 383), S( 352, 389), S( 348, 384), S( 356, 366), S( 362, 373), S( 347, 372),
                S( 366, 363), S( 352, 361), S( 361, 364), S( 341, 376), S( 348, 372), S( 369, 355), S( 369, 358), S( 349, 347),
                S( 300, 378), S( 345, 368), S( 336, 354), S( 328, 369), S( 349, 368), S( 327, 366), S( 322, 369), S( 314, 368),
        },
        {
                S( 543, 732), S( 530, 739), S( 545, 742), S( 569, 737), S( 597, 724), S( 585, 729), S( 601, 726), S( 629, 709),
                S( 512, 760), S( 500, 766), S( 546, 758), S( 563, 755), S( 578, 742), S( 620, 712), S( 563, 737), S( 594, 726),
                S( 485, 759), S( 515, 752), S( 510, 755), S( 538, 741), S( 562, 731), S( 600, 716), S( 619, 710), S( 553, 720),
                S( 463, 747), S( 478, 747), S( 496, 753), S( 517, 736), S( 515, 735), S( 540, 732), S( 526, 728), S( 479, 738),
                S( 447, 740), S( 460, 743), S( 475, 745), S( 479, 739), S( 500, 726), S( 482, 721), S( 512, 719), S( 448, 731),
                S( 428, 737), S( 454, 735), S( 461, 732), S( 468, 725), S( 492, 712), S( 495, 703), S( 494, 718), S( 448, 719),
                S( 433, 734), S( 466, 724), S( 468, 730), S( 477, 726), S( 492, 713), S( 497, 706), S( 491, 714), S( 390, 742),
                S( 462, 719), S( 473, 725), S( 485, 734), S( 496, 726), S( 504, 714), S( 500, 721), S( 414, 758), S( 447, 717),
        },
        {
                S(1084, 1246), S(1061, 1306), S(1094, 1280), S(1114, 1262), S(1130, 1280), S(1232, 1219), S(1273, 1189), S(1180,1250),
                S(1052, 1269), S(1033, 1293), S(1049, 1323), S(1036, 1355), S(1040, 1346), S(1171, 1261), S(1089, 1326), S(1194,1236),
                S(1077, 1243), S(1062, 1263), S(1062, 1274), S(1082, 1291), S(1109, 1304), S(1173, 1271), S(1152, 1295), S(1130,1295),
                S(1058, 1250), S(1052, 1274), S(1051, 1274), S(1052, 1295), S(1072, 1293), S(1078, 1297), S(1077, 1322), S(1081,1326),
                S(1063, 1236), S(1048, 1256), S(1059, 1249), S(1082, 1241), S(1070, 1262), S(1064, 1273), S(1075, 1284), S(1081,1279),
                S(1061, 1217), S(1076, 1206), S(1060, 1241), S(1065, 1219), S(1067, 1224), S(1075, 1239), S(1082, 1265), S(1073,1246),
                S(1045, 1229), S(1074, 1206), S(1083, 1195), S(1075, 1215), S(1079, 1214), S(1113, 1152), S(1079, 1169), S(1076,1220),
                S(1082, 1196), S(1070, 1195), S(1071, 1202), S(1091, 1186), S(1081, 1199), S(1065, 1179), S(1021, 1207), S(1023,1187),
        },
        {
                S( -12, -57), S(  78, -24), S( 106, -29), S(  49,  -3), S(   8,  14), S(  14,  26), S(  45,  23), S(  15, -14),
                S(  77,  -9), S(  30,  34), S(  21,  32), S(  68,  23), S(  18,  31), S(  19,  49), S(  11,  56), S( -40,  28),
                S(  43,  10), S(  29,  34), S(  16,  38), S(  17,  32), S(   8,  37), S(  50,  48), S(  41,  57), S(  -6,  32),
                S(  11,   1), S(   9,  30), S(  -2,  39), S( -15,  41), S( -18,  39), S(   9,  42), S(  13,  38), S( -51,  21),
                S( -38,  -4), S(  22,   2), S(   1,  25), S( -36,  34), S( -26,  34), S( -18,  30), S( -27,  21), S( -53,   2),
                S(  17, -23), S(  13,  -2), S( -16,  14), S( -33,  24), S( -34,  26), S( -29,  19), S(   0,   5), S( -32,  -3),
                S(  26, -29), S(  -6,  -4), S( -18,   8), S( -65,  17), S( -45,  17), S( -19,   7), S(  14,  -6), S(  26, -24),
                S( -44, -38), S(  19, -28), S(   2, -12), S( -72,  -5), S(   4, -33), S( -46,  -5), S(  33, -30), S(  25, -52),
        },
};

template <Color color>
std::int16_t evaluate(board & chessboard) {
    std::int32_t eval = 0;
    std::int16_t game_phase = 0;

    for (Piece piece : {Pawn, Knight, Bishop, Rook, Queen, King}) {
        std::uint64_t bitboard = chessboard.get_pieces(White, piece) ;
        while (bitboard) {
            int square = pop_lsb(bitboard) ^ 56;
            eval += piece_square_tables[piece][square];
            game_phase += game_phase_increment[piece];
        }
    }

    for (Piece piece : {Pawn, Knight, Bishop, Rook, Queen, King}) {
        std::uint64_t bitboard = chessboard.get_pieces(Black, piece) ;
        while (bitboard) {
            int square = pop_lsb(bitboard);
            eval -= piece_square_tables[piece][square];
            game_phase += game_phase_increment[piece];
        }
    }

    game_phase = std::min(game_phase, max_game_phase_value);

    auto mg_eval = static_cast<int16_t>(eval);
    auto eg_eval = static_cast<int16_t>(eval >> 16);

    if constexpr (color == White) {
        return static_cast<std::int16_t>( (mg_eval * game_phase + eg_eval * (24 - game_phase)) / 24);
    } else {
        return static_cast<std::int16_t>(-(mg_eval * game_phase + eg_eval * (24 - game_phase)) / 24);
    }
}


#endif //MOTOR_EVALUATION_HPP
