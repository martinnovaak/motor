#ifndef MOTOR_EVALUATION_HPP
#define MOTOR_EVALUATION_HPP

#include <cstdint>
#include "../chess_board/board.hpp"

[[nodiscard]] constexpr std::int32_t S(const int32_t mg, const int32_t eg) {
    return (eg << 16) + mg;
}

constexpr std::int16_t game_phase_increment[6] = {0, 1, 1, 2, 4, 0};
constexpr std::int16_t max_game_phase_value = 24;

constexpr std::int32_t piece_square_tables[6][64] = {
        {
                S( 100, 100), S( 100, 100), S( 100, 100), S( 100, 100), S( 100, 100), S( 100, 100), S( 100, 100), S( 100, 100),
                S( 205, 267), S( 237, 257), S( 199, 234), S( 225, 194), S( 223, 205), S( 191, 230), S(  68, 280), S(   5, 302),
                S(  90, 183), S( 119, 170), S( 128, 146), S( 152,  92), S( 173, 104), S( 199, 131), S( 175, 163), S( 113, 162),
                S(  67, 169), S(  98, 160), S(  93, 134), S( 109, 114), S( 115, 128), S( 113, 137), S( 120, 154), S(  80, 148),
                S(  56, 155), S(  85, 151), S(  85, 129), S(  96, 120), S( 116, 126), S( 104, 132), S( 120, 142), S(  75, 131),
                S(  58, 140), S(  79, 146), S(  74, 122), S(  75, 130), S(  93, 133), S(  92, 129), S( 147, 127), S(  93, 121),
                S(  50, 151), S(  80, 146), S(  61, 137), S(  45, 122), S(  64, 151), S( 116, 130), S( 154, 127), S(  85, 122),
                S( 100, 100), S( 100, 100), S( 100, 100), S( 100, 100), S( 100, 100), S( 100, 100), S( 100, 100), S( 100, 100),
        },
        {
                S( 211, 350), S( 261, 397), S( 361, 411), S( 418, 379), S( 496, 379), S( 291, 407), S( 400, 345), S( 315, 281),
                S( 348, 387), S( 352, 432), S( 457, 408), S( 451, 435), S( 428, 426), S( 497, 382), S( 421, 382), S( 392, 370),
                S( 340, 414), S( 441, 415), S( 424, 456), S( 454, 457), S( 530, 426), S( 576, 416), S( 465, 417), S( 438, 379),
                S( 390, 409), S( 397, 451), S( 419, 467), S( 436, 476), S( 412, 473), S( 444, 467), S( 405, 451), S( 420, 408),
                S( 369, 410), S( 388, 429), S( 399, 463), S( 388, 472), S( 409, 467), S( 390, 469), S( 408, 440), S( 377, 399),
                S( 348, 391), S( 373, 423), S( 383, 443), S( 378, 459), S( 398, 449), S( 388, 418), S( 390, 413), S( 349, 400),
                S( 329, 377), S( 311, 416), S( 362, 413), S( 380, 417), S( 366, 430), S( 387, 398), S( 374, 389), S( 359, 374),
                S( 251, 379), S( 352, 363), S( 302, 414), S( 334, 414), S( 352, 395), S( 374, 382), S( 341, 357), S( 308, 352),
        },
        {
                S( 389, 440), S( 416, 443), S( 361, 449), S( 388, 447), S( 376, 450), S( 393, 449), S( 453, 426), S( 414, 435),
                S( 376, 452), S( 423, 466), S( 413, 469), S( 433, 455), S( 446, 459), S( 489, 440), S( 409, 461), S( 387, 430),
                S( 399, 459), S( 438, 459), S( 454, 464), S( 466, 467), S( 471, 467), S( 538, 466), S( 492, 457), S( 435, 457),
                S( 399, 451), S( 418, 474), S( 448, 469), S( 456, 494), S( 436, 496), S( 457, 479), S( 415, 481), S( 410, 460),
                S( 423, 448), S( 429, 464), S( 424, 484), S( 434, 497), S( 445, 482), S( 414, 477), S( 418, 464), S( 426, 443),
                S( 413, 451), S( 432, 458), S( 420, 476), S( 421, 489), S( 414, 477), S( 418, 463), S( 429, 456), S( 407, 447),
                S( 430, 430), S( 419, 435), S( 425, 450), S( 403, 462), S( 408, 464), S( 429, 441), S( 435, 434), S( 412, 415),
                S( 364, 440), S( 402, 437), S( 391, 417), S( 378, 446), S( 398, 440), S( 380, 435), S( 370, 443), S( 366, 431),
        },
        {
                S( 587, 788), S( 581, 795), S( 602, 797), S( 623, 796), S( 651, 781), S( 617, 787), S( 640, 782), S( 677, 761),
                S( 548, 817), S( 541, 822), S( 587, 816), S( 604, 813), S( 622, 797), S( 658, 771), S( 600, 794), S( 622, 782),
                S( 524, 814), S( 549, 810), S( 548, 813), S( 589, 797), S( 605, 790), S( 628, 777), S( 643, 768), S( 572, 779),
                S( 488, 805), S( 510, 805), S( 530, 811), S( 557, 795), S( 553, 793), S( 561, 795), S( 548, 787), S( 496, 797),
                S( 478, 794), S( 491, 800), S( 503, 806), S( 512, 799), S( 532, 785), S( 501, 782), S( 534, 778), S( 466, 789),
                S( 459, 787), S( 483, 791), S( 492, 788), S( 496, 783), S( 516, 772), S( 511, 762), S( 513, 778), S( 462, 776),
                S( 457, 788), S( 491, 782), S( 487, 790), S( 499, 786), S( 512, 773), S( 510, 768), S( 496, 778), S( 388, 807),
                S( 492, 774), S( 499, 782), S( 505, 797), S( 516, 793), S( 520, 781), S( 506, 786), S( 411, 823), S( 447, 777),
        },
        {
                S(1152, 1423), S(1133, 1495), S(1178, 1474), S(1210, 1444), S(1231, 1458), S(1329, 1391), S(1349, 1365), S(1250,
                                                                                                                           1427),
                S(1127, 1434), S(1109, 1485), S(1133, 1519), S(1120, 1550), S(1130, 1538), S(1263, 1450), S(1173, 1505), S(1267,
                                                                                                                           1396),
                S(1152, 1419), S(1143, 1451), S(1143, 1484), S(1173, 1500), S(1200, 1516), S(1270, 1462), S(1238, 1479), S(1213,
                                                                                                                           1454),
                S(1135, 1426), S(1130, 1479), S(1131, 1493), S(1138, 1522), S(1161, 1517), S(1160, 1510), S(1154, 1518), S(1153,
                                                                                                                           1500),
                S(1133, 1425), S(1127, 1464), S(1136, 1467), S(1164, 1466), S(1149, 1491), S(1146, 1482), S(1150, 1485), S(1155,
                                                                                                                           1451),
                S(1135, 1393), S(1149, 1404), S(1138, 1448), S(1137, 1439), S(1139, 1440), S(1149, 1445), S(1160, 1455), S(1142,
                                                                                                                           1424),
                S(1106, 1410), S(1147, 1391), S(1154, 1387), S(1144, 1416), S(1144, 1414), S(1176, 1353), S(1143, 1359), S(1138,
                                                                                                                           1390),
                S(1151, 1371), S(1130, 1381), S(1123, 1404), S(1148, 1361), S(1129, 1403), S(1115, 1362), S(1063, 1392), S(1083,
                                                                                                                           1351),
        },
        {
                S( -12, -57), S(  78, -24), S( 106, -29), S(  49,  -3), S(   8,  14), S(  14,  26), S(  45,  23), S(  15, -14),
                S(  77,  -9), S(  30,  34), S(  21,  32), S(  68,  23), S(  18,  31), S(  19,  49), S(  11,  56), S( -40,  28),
                S(  43,  10), S(  29,  34), S(  16,  38), S(  17,  32), S(   8,  37), S(  50,  48), S(  41,  57), S(  -6,  32),
                S(  11,   1), S(   9,  30), S(  -2,  39), S( -15,  41), S( -18,  39), S(   9,  42), S(  13,  38), S( -51,  21),
                S( -38,  -4), S(  22,   2), S(   1,  25), S( -36,  34), S( -26,  34), S( -18,  30), S( -27,  21), S( -53,   2),
                S(  17, -23), S(  13,  -2), S( -16,  14), S( -33,  24), S( -34,  26), S( -29,  19), S(   0,   5), S( -32,  -3),
                S(  26, -29), S(  -6,  -4), S( -18,   8), S( -65,  17), S( -45,  17), S( -19,   7), S(  14,  -6), S(  26, -24),
                S( -44, -38), S(  19, -28), S(   2, -12), S( -72,  -5), S(   4, -33), S( -46,  -5), S(  33, -30), S(  25, -52),
        },
};
constexpr int32_t passer[8] = {
        0, S(  29, 135), S(  15, 152), S(  14,  69), S( -11,  34), S(  -8,   3), S(   5,  -9), 0, };

constexpr uint64_t passed_pawn_mask[2][64] = {
        {
                0x0303030303030300, 0x0707070707070700, 0x0e0e0e0e0e0e0e00, 0x1c1c1c1c1c1c1c00, 0x3838383838383800, 0x7070707070707000, 0xe0e0e0e0e0e0e000, 0xc0c0c0c0c0c0c000,
                0x0303030303030000, 0x0707070707070000, 0x0e0e0e0e0e0e0000, 0x1c1c1c1c1c1c0000, 0x3838383838380000, 0x7070707070700000, 0xe0e0e0e0e0e00000, 0xc0c0c0c0c0c00000,
                0x0303030303000000, 0x0707070707000000, 0x0e0e0e0e0e000000, 0x1c1c1c1c1c000000, 0x3838383838000000, 0x7070707070000000, 0xe0e0e0e0e0000000, 0xc0c0c0c0c0000000,
                0x0303030300000000, 0x0707070700000000, 0x0e0e0e0e00000000, 0x1c1c1c1c00000000, 0x3838383800000000, 0x7070707000000000, 0xe0e0e0e000000000, 0xc0c0c0c000000000,
                0x0303030000000000, 0x0707070000000000, 0x0e0e0e0000000000, 0x1c1c1c0000000000, 0x3838380000000000, 0x7070700000000000, 0xe0e0e00000000000, 0xc0c0c00000000000,
                0x0303000000000000, 0x0707000000000000, 0x0e0e000000000000, 0x1c1c000000000000, 0x3838000000000000, 0x7070000000000000, 0xe0e0000000000000, 0xc0c0000000000000,
                0x0300000000000000, 0x0700000000000000, 0x0e00000000000000, 0x1c00000000000000, 0x3800000000000000, 0x7000000000000000, 0xe000000000000000, 0xc000000000000000,
                000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000,
        },
        {
                000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000, 000000000000000000,
                0x0000000000000003, 0x0000000000000007, 0x000000000000000e, 0x000000000000001c, 0x0000000000000038, 0x0000000000000070, 0x00000000000000e0, 0x00000000000000c0,
                0x0000000000000303, 0x0000000000000707, 0x0000000000000e0e, 0x0000000000001c1c, 0x0000000000003838, 0x0000000000007070, 0x000000000000e0e0, 0x000000000000c0c0,
                0x0000000000030303, 0x0000000000070707, 0x00000000000e0e0e, 0x00000000001c1c1c, 0x0000000000383838, 0x0000000000707070, 0x0000000000e0e0e0, 0x0000000000c0c0c0,
                0x0000000003030303, 0x0000000007070707, 0x000000000e0e0e0e, 0x000000001c1c1c1c, 0x0000000038383838, 0x0000000070707070, 0x00000000e0e0e0e0, 0x00000000c0c0c0c0,
                0x0000000303030303, 0x0000000707070707, 0x0000000e0e0e0e0e, 0x0000001c1c1c1c1c, 0x0000003838383838, 0x0000007070707070, 0x000000e0e0e0e0e0, 0x000000c0c0c0c0c0,
                0x0000030303030303, 0x0000070707070707, 0x00000e0e0e0e0e0e, 0x00001c1c1c1c1c1c, 0x0000383838383838, 0x0000707070707070, 0x0000e0e0e0e0e0e0, 0x0000c0c0c0c0c0c0,
                0x0003030303030303, 0x0007070707070707, 0x000e0e0e0e0e0e0e, 0x001c1c1c1c1c1c1c, 0x0038383838383838, 0x0070707070707070, 0x00e0e0e0e0e0e0e0, 0x00c0c0c0c0c0c0c0,
        }
};

template <Color color>
std::int16_t evaluate(board & chessboard) {
    std::int32_t eval = 0;
    std::int16_t game_phase = 0;

    for (Piece piece : {Pawn, Knight, Bishop, Rook, Queen, King}) {
        std::uint64_t bitboard = chessboard.get_pieces(White, piece) ;
        while (bitboard) {
            int square = pop_lsb(bitboard) ^ 56;
            eval += piece_square_tables[piece][square];
            game_phase += game_phase_increment[piece];
        }
    }

    for (Piece piece : {Pawn, Knight, Bishop, Rook, Queen, King}) {
        std::uint64_t bitboard = chessboard.get_pieces(Black, piece) ;
        while (bitboard) {
            int square = pop_lsb(bitboard);
            eval -= piece_square_tables[piece][square];
            game_phase += game_phase_increment[piece];
        }
    }

    uint64_t wp, bp, white_pawns, black_pawns;
    uint64_t white_occ = chessboard.get_side_occupancy<White>();
    uint64_t black_occ = chessboard.get_side_occupancy<Black>();
    wp = white_pawns = chessboard.get_pieces(White, Pawn);
    bp = black_pawns = chessboard.get_pieces(Black, Pawn);
    int white_pawn_count = popcount(wp);
    int black_pawn_count = popcount(bp);

    if ((white_pawn_count + black_pawn_count) == 0 && game_phase < 2) {
        return 0;
    }

    while(wp) {
        int square = pop_lsb(wp);
        if ((passed_pawn_mask[White][square] & black_pawns) == 0) {
            eval += passer[(square >> 3) ^ 7];
        }
    }

    while(bp) {
        int square = pop_lsb(bp);
        if ((passed_pawn_mask[Black][square] & white_pawns) == 0) {
            eval -= passer[(square >> 3)];
        }
    }

    game_phase = std::min(game_phase, max_game_phase_value);

    auto mg_eval = static_cast<int16_t>(eval);
    auto eg_eval = static_cast<int16_t>(eval >> 16);

    if constexpr (color == White) {
        return static_cast<std::int16_t>( (mg_eval * game_phase + eg_eval * (24 - game_phase)) / 24);
    } else {
        return static_cast<std::int16_t>(-(mg_eval * game_phase + eg_eval * (24 - game_phase)) / 24);
    }
}


#endif //MOTOR_EVALUATION_HPP
