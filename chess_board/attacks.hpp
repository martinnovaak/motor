#ifndef MOTOR_ATTACKS_HPP
#define MOTOR_ATTACKS_HPP

#include "slider_attacks/kindergarten.hpp"

constexpr std::uint64_t PAWN_ATTACKS_TABLE[2][64] = {
    {       // white pawn attacks
        0x0000000000000200ull, 0x0000000000000500ull, 0x0000000000000a00ull, 0x0000000000001400ull,
        0x0000000000002800ull, 0x0000000000005000ull, 0x000000000000a000ull, 0x0000000000004000ull,
        0x0000000000020000ull, 0x0000000000050000ull, 0x00000000000a0000ull, 0x0000000000140000ull,
        0x0000000000280000ull, 0x0000000000500000ull, 0x0000000000a00000ull, 0x0000000000400000ull,
        0x0000000002000000ull, 0x0000000005000000ull, 0x000000000a000000ull, 0x0000000014000000ull,
        0x0000000028000000ull, 0x0000000050000000ull, 0x00000000a0000000ull, 0x0000000040000000ull,
        0x0000000200000000ull, 0x0000000500000000ull, 0x0000000a00000000ull, 0x0000001400000000ull,
        0x0000002800000000ull, 0x0000005000000000ull, 0x000000a000000000ull, 0x0000004000000000ull,
        0x0000020000000000ull, 0x0000050000000000ull, 0x00000a0000000000ull, 0x0000140000000000ull,
        0x0000280000000000ull, 0x0000500000000000ull, 0x0000a00000000000ull, 0x0000400000000000ull,
        0x0002000000000000ull, 0x0005000000000000ull, 0x000a000000000000ull, 0x0014000000000000ull,
        0x0028000000000000ull, 0x0050000000000000ull, 0x00a0000000000000ull, 0x0040000000000000ull,
        0x0200000000000000ull, 0x0500000000000000ull, 0x0a00000000000000ull, 0x1400000000000000ull,
        0x2800000000000000ull, 0x5000000000000000ull, 0xa000000000000000ull, 0x4000000000000000ull,
        0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,
        0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,
    },{    // black pawn attacks
        0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,
        0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull, 0x0000000000000000ull,
        0x0000000000000002ull, 0x0000000000000005ull, 0x000000000000000aull, 0x0000000000000014ull,
        0x0000000000000028ull, 0x0000000000000050ull, 0x00000000000000a0ull, 0x0000000000000040ull,
        0x0000000000000200ull, 0x0000000000000500ull, 0x0000000000000a00ull, 0x0000000000001400ull,
        0x0000000000002800ull, 0x0000000000005000ull, 0x000000000000a000ull, 0x0000000000004000ull,
        0x0000000000020000ull, 0x0000000000050000ull, 0x00000000000a0000ull, 0x0000000000140000ull,
        0x0000000000280000ull, 0x0000000000500000ull, 0x0000000000a00000ull, 0x0000000000400000ull,
        0x0000000002000000ull, 0x0000000005000000ull, 0x000000000a000000ull, 0x0000000014000000ull,
        0x0000000028000000ull, 0x0000000050000000ull, 0x00000000a0000000ull, 0x0000000040000000ull,
        0x0000000200000000ull, 0x0000000500000000ull, 0x0000000a00000000ull, 0x0000001400000000ull,
        0x0000002800000000ull, 0x0000005000000000ull, 0x000000a000000000ull, 0x0000004000000000ull,
        0x0000020000000000ull, 0x0000050000000000ull, 0x00000a0000000000ull, 0x0000140000000000ull,
        0x0000280000000000ull, 0x0000500000000000ull, 0x0000a00000000000ull, 0x0000400000000000ull,
        0x0002000000000000ull, 0x0005000000000000ull, 0x000a000000000000ull, 0x0014000000000000ull,
        0x0028000000000000ull, 0x0050000000000000ull, 0x00a0000000000000ull, 0x0040000000000000ull,
    }
};

// precalculated lookup table for knight attacks
constexpr std::uint64_t KNIGHT_ATTACKS[] {
    0x0000000000020400ull, 0x0000000000050800ull, 0x00000000000a1100ull, 0x0000000000142200ull,
    0x0000000000284400ull, 0x0000000000508800ull, 0x0000000000a01000ull, 0x0000000000402000ull,
    0x0000000002040004ull, 0x0000000005080008ull, 0x000000000a110011ull, 0x0000000014220022ull,
    0x0000000028440044ull, 0x0000000050880088ull, 0x00000000a0100010ull, 0x0000000040200020ull,
    0x0000000204000402ull, 0x0000000508000805ull, 0x0000000a1100110aull, 0x0000001422002214ull,
    0x0000002844004428ull, 0x0000005088008850ull, 0x000000a0100010a0ull, 0x0000004020002040ull,
    0x0000020400040200ull, 0x0000050800080500ull, 0x00000a1100110a00ull, 0x0000142200221400ull,
    0x0000284400442800ull, 0x0000508800885000ull, 0x0000a0100010a000ull, 0x0000402000204000ull,
    0x0002040004020000ull, 0x0005080008050000ull, 0x000a1100110a0000ull, 0x0014220022140000ull,
    0x0028440044280000ull, 0x0050880088500000ull, 0x00a0100010a00000ull, 0x0040200020400000ull,
    0x0204000402000000ull, 0x0508000805000000ull, 0x0a1100110a000000ull, 0x1422002214000000ull,
    0x2844004428000000ull, 0x5088008850000000ull, 0xa0100010a0000000ull, 0x4020002040000000ull,
    0x0400040200000000ull, 0x0800080500000000ull, 0x1100110a00000000ull, 0x2200221400000000ull,
    0x4400442800000000ull, 0x8800885000000000ull, 0x100010a000000000ull, 0x2000204000000000ull,
    0x0004020000000000ull, 0x0008050000000000ull, 0x00110a0000000000ull, 0x0022140000000000ull,
    0x0044280000000000ull, 0x0088500000000000ull, 0x0010a00000000000ull, 0x0020400000000000ull,
};

// precalculated lookup table for king attacks
constexpr std::uint64_t KING_ATTACKS[] {
    0x0000000000000302ull, 0x0000000000000705ull, 0x0000000000000e0aull, 0x0000000000001c14ull,
    0x0000000000003828ull, 0x0000000000007050ull, 0x000000000000e0a0ull, 0x000000000000c040ull,
    0x0000000000030203ull, 0x0000000000070507ull, 0x00000000000e0a0eull, 0x00000000001c141cull,
    0x0000000000382838ull, 0x0000000000705070ull, 0x0000000000e0a0e0ull, 0x0000000000c040c0ull,
    0x0000000003020300ull, 0x0000000007050700ull, 0x000000000e0a0e00ull, 0x000000001c141c00ull,
    0x0000000038283800ull, 0x0000000070507000ull, 0x00000000e0a0e000ull, 0x00000000c040c000ull,
    0x0000000302030000ull, 0x0000000705070000ull, 0x0000000e0a0e0000ull, 0x0000001c141c0000ull,
    0x0000003828380000ull, 0x0000007050700000ull, 0x000000e0a0e00000ull, 0x000000c040c00000ull,
    0x0000030203000000ull, 0x0000070507000000ull, 0x00000e0a0e000000ull, 0x00001c141c000000ull,
    0x0000382838000000ull, 0x0000705070000000ull, 0x0000e0a0e0000000ull, 0x0000c040c0000000ull,
    0x0003020300000000ull, 0x0007050700000000ull, 0x000e0a0e00000000ull, 0x001c141c00000000ull,
    0x0038283800000000ull, 0x0070507000000000ull, 0x00e0a0e000000000ull, 0x00c040c000000000ull,
    0x0302030000000000ull, 0x0705070000000000ull, 0x0e0a0e0000000000ull, 0x1c141c0000000000ull,
    0x3828380000000000ull, 0x7050700000000000ull, 0xe0a0e00000000000ull, 0xc040c00000000000ull,
    0x0203000000000000ull, 0x0507000000000000ull, 0x0a0e000000000000ull, 0x141c000000000000ull,
    0x2838000000000000ull, 0x5070000000000000ull, 0xa0e0000000000000ull, 0x40c0000000000000ull,
};

enum class Ray : std::uint8_t {
    HORIZONTAL, VERTICAL, ANTIDIAGONAL, DIAGONAL, ROOK, BISHOP, QUEEN
};

template <Ray ray>
constexpr std::uint64_t attacks(int square, uint64_t occupancy)
{
    if constexpr (ray == Ray::HORIZONTAL) {
        return kindergarten::rook_horizontal(square, occupancy);
    } else if constexpr (ray == Ray::VERTICAL) {
        return kindergarten::rook_vertical(square, occupancy);
    } else if constexpr (ray == Ray::ANTIDIAGONAL) {
        return kindergarten::bishop_antidiagonal(square, occupancy);
    } else if constexpr (ray == Ray::DIAGONAL) {
        return kindergarten::bishop_diagonal(square, occupancy);
    } else if constexpr (ray == Ray::ROOK) {
        return kindergarten::rook(square, occupancy);
    } else if constexpr (ray == Ray::BISHOP) {
        return kindergarten::bishop(square, occupancy);
    } else if constexpr (ray == Ray::QUEEN) {
        return kindergarten::queen(square, occupancy);
    }
}

#endif //MOTOR_ATTACKS_HPP
